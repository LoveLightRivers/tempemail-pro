'use client'

import React, { useState, useEffect } from 'react';
import { 
  Copy, RefreshCw, Trash, Mail, Clock, Download, User, 
  LogOut, Plus, Crown, Settings, Shield, Zap, CheckCircle,
  AlertCircle, ExternalLink, Database, Globe2, ChevronDown
} from 'lucide-react';

// Mock contexts for demo - will be replaced with real ones
const useAuth = () => ({
  user: { email: 'demo@example.com' },
  profile: { 
    subscription_plan: 'business',
    subscription_status: 'active',
    email_count: 2,
    max_simultaneous_emails: 10,
    storage_limit: 1073741824,
    custom_domain: 'mycompany.com'
  },
  isSubscribed: true,
  isPro: true,
  isBusiness: true,
  canCreateEmail: true,
  weeklyEmailCount: 2,
  signOut: () => {},
  loading: false
});

const useEmail = () => {
  const [loading, setLoading] = useState(false);
  const [refreshing, setRefreshing] = useState(false);
  const [tempEmails, setTempEmails] = useState([
    {
      id: '1',
      email_address: 'sales@mycompany.com',
      expires_at: new Date(Date.now() + 6 * 24 * 60 * 60000).toISOString(),
      is_active: true,
      created_at: new Date().toISOString(),
      domain: 'mycompany.com',
      type: 'custom'
    },
    {
      id: '2',
      email_address: 'demo123@promail.co',
      expires_at: new Date(Date.now() + 20 * 60 * 60000).toISOString(),
      is_active: true,
      created_at: new Date().toISOString(),
      domain: 'promail.co',
      type: 'premium'
    }
  ]);
  
  const [currentEmail, setCurrentEmail] = useState(tempEmails[0]);
  const [messages, setMessages] = useState([
    {
      id: '1',
      sender: 'contact@potential-client.com',
      subject: 'Interested in your services',
      body: 'Hi, I saw your website and I\'m interested in learning more...',
      html_body: '<p>Hi, I saw your website and I\'m interested in learning more...</p>',
      attachments: [{ filename: 'requirements.pdf', size: 2500000, type: 'application/pdf' }],
      is_read: false,
      received_at: new Date(Date.now() - 15 * 60000).toISOString(),
      temp_email_id: '1'
    }
  ]);

  const generateEmail = () => {
    setLoading(true);
    setTimeout(() => {
      const newEmail = {
        id: Date.now().toString(),
        email_address: `temp${Math.random().toString(36).substr(2, 8)}@promail.co`,
        expires_at: new Date(Date.now() + 24 * 60 * 60000).toISOString(),
        is_active: true,
        created_at: new Date().toISOString(),
        domain: 'promail.co',
        type: 'premium'
      };
      setTempEmails(prev => [newEmail, ...prev]);
      setCurrentEmail(newEmail);
      setLoading(false);
    }, 1500);
  };

  const refreshMessages = () => {
    setRefreshing(true);
    setTimeout(() => setRefreshing(false), 1000);
  };

  const getTimeRemaining = (expiresAt) => {
    const now = new Date();
    const expires = new Date(expiresAt);
    const diff = expires.getTime() - now.getTime();
    
    if (diff <= 0) return 'Expired';
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (days > 0) return `${days}d ${hours}h`;
    if (hours > 0) return `${hours}h ${minutes}m`;
    return `${minutes}m`;
  };

  const copyEmailAddress = () => {
    navigator.clipboard.writeText(currentEmail.email_address);
  };

  const selectEmail = setCurrentEmail;
  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return {
    tempEmails, currentEmail, 
    messages: messages.filter(msg => msg.temp_email_id === currentEmail?.id) || [],
    loading, refreshing, generateEmail, refreshMessages, getTimeRemaining,
    copyEmailAddress, selectEmail, formatFileSize
  };
};

const usePayment = () => ({
  createCheckoutSession:async (priceId, plan) => {
    try {
  const response = await fetch('/api/create-checkout-session', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ priceId, plan }),
  });
  const session = await response.json();
  if (session.url) {
    window.location.href = session.url;
  } else {
    alert('Error creating checkout session');
  }
} catch (error) {
  console.error('Error:', error);
  alert('Error creating checkout session');
}
  loading: false
});

export default function TempEmailApp() {
  const auth = useAuth();
  const email = useEmail();
  const payment = usePayment();
  
  const [showUpgrade, setShowUpgrade] = useState(false);
  const [showSettings, setShowSettings] = useState(false);

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Header */}
      <header className="bg-black shadow-lg sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-3">
              <div className="w-8 h-8 bg-white rounded-lg flex items-center justify-center">
                <Mail className="w-5 h-5 text-black" />
              </div>
              <h1 className="text-xl font-bold text-white">TempEmail Pro</h1>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="text-sm text-gray-300">
                <div className="flex items-center space-x-3">
                  <span className="flex items-center px-2 py-1 rounded text-white text-xs font-medium bg-purple-600">
                    <Crown className="w-3 h-3 mr-1" />
                    Business Plan
                  </span>
                  <span className="text-white">
                    {email.tempEmails.length}/10 active emails
                  </span>
                </div>
              </div>
              
              <div className="flex items-center space-x-2">
                <button className="p-2 text-gray-300 hover:text-white rounded-lg hover:bg-gray-800 transition-all">
                  <Settings className="w-5 h-5" />
                </button>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* Left Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
              <div className="p-6 border-b bg-gray-900">
                <h2 className="text-lg font-semibold text-white mb-4">Temporary Emails</h2>
                <button 
                  onClick={email.generateEmail}
                  disabled={email.loading}
                  className="w-full flex items-center justify-center px-4 py-2 bg-white text-black rounded-lg hover:bg-gray-200 transition-all disabled:opacity-50 font-medium"
                >
                  {email.loading ? (
                    <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                  ) : (
                    <Plus className="w-4 h-4 mr-2" />
                  )}
                  Generate New Email
                </button>
              </div>
              
              <div className="p-4 space-y-3">
                {email.tempEmails.map((emailItem) => (
                  <div 
                    key={emailItem.id}
                    onClick={() => email.selectEmail(emailItem)}
                    className={`p-3 rounded-lg border cursor-pointer transition-all ${
                      email.currentEmail?.id === emailItem.id 
                        ? 'border-black bg-gray-50 ring-1 ring-black' 
                        : 'border-gray-200 hover:border-gray-400'
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <span className="text-xs px-2 py-1 rounded-full font-medium bg-green-100 text-green-800">
                        Active
                      </span>
                      <span className="text-xs px-2 py-1 rounded-full bg-purple-100 text-purple-800 font-medium">
                        <Crown className="w-3 h-3 mr-1 inline" />
                        Premium
                      </span>
                    </div>
                    <p className="text-sm font-mono text-gray-900 break-all mb-2 p-2 bg-gray-100 rounded">
                      {emailItem.email_address}
                    </p>
                    <div className="flex items-center justify-between">
                      <div className="flex items-center text-xs text-gray-600">
                        <Clock className="w-3 h-3 mr-1" />
                        <span>{email.getTimeRemaining(emailItem.expires_at)}</span>
                      </div>
                      <button 
                        onClick={(e) => {
                          e.stopPropagation();
                          navigator.clipboard.writeText(emailItem.email_address);
                        }}
                        className="p-1 hover:bg-gray-200 rounded transition-all"
                      >
                        <Copy className="w-3 h-3" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-lg shadow-sm border overflow-hidden">
              <div className="p-6 border-b bg-gray-50">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-gray-900">Inbox</h2>
                  <button 
                    onClick={email.refreshMessages}
                    disabled={email.refreshing}
                    className="flex items-center px-4 py-2 text-sm text-white bg-black rounded-lg hover:bg-gray-800 transition-all disabled:opacity-50"
                  >
                    {email.refreshing ? (
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                    ) : (
                      <RefreshCw className="w-4 h-4 mr-2" />
                    )}
                    Refresh
                  </button>
                </div>
                
                {email.currentEmail && (
                  <div className="flex items-center justify-between p-4 bg-white rounded-lg border-2 border-gray-200">
                    <div className="flex-1">
                      <p className="text-lg font-mono text-gray-900 break-all mb-1">
                        {email.currentEmail.email_address}
                      </p>
                      <div className="flex items-center text-sm text-gray-500 space-x-4">
                        <span className="flex items-center">
                          <Clock className="w-4 h-4 mr-1" />
                          Expires in {email.getTimeRemaining(email.currentEmail.expires_at)}
                        </span>
                        <span className="flex items-center">
                          <Shield className="w-4 h-4 mr-1" />
                          7-day lifetime
                        </span>
                      </div>
                    </div>
                    <button 
                      onClick={email.copyEmailAddress}
                      className="ml-4 px-4 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-all text-sm font-medium"
                    >
                      <Copy className="w-4 h-4 mr-2 inline" />
                      Copy
                    </button>
                  </div>
                )}
              </div>

              <div className="divide-y divide-gray-200">
                {email.messages.length === 0 ? (
                  <div className="py-16 text-center">
                    <Mail className="w-12 h-12 text-gray-400 mx-auto" />
                    <h3 className="mt-4 text-lg font-medium text-gray-900">No emails yet</h3>
                    <p className="mt-2 text-gray-500">New emails will appear here automatically</p>
                  </div>
                ) : (
                  email.messages.map((msg) => (
                    <div key={msg.id} className="p-6 hover:bg-gray-50 cursor-pointer transition-all">
                      <div className="flex items-start justify-between">
                        <div className="flex-1 min-w-0">
                          <p className="text-sm font-medium text-blue-600 truncate mb-1">
                            {msg.sender}
                          </p>
                          <p className="text-sm text-gray-900 font-medium truncate mb-2">
                            {msg.subject}
                          </p>
                          <p className="text-sm text-gray-500 line-clamp-2 mb-2">
                            {msg.body.replace(/<[^>]*>/g, '')}
                          </p>
                          {msg.attachments.length > 0 && (
                            <div className="flex items-center text-xs text-gray-500">
                              <Download className="w-3 h-3 mr-1" />
                              <span>{msg.attachments[0].filename} ({email.formatFileSize(msg.attachments[0].size)})</span>
                            </div>
                          )}
                        </div>
                        <div className="ml-4 flex-shrink-0 text-xs text-gray-500">
                          {new Date(msg.received_at).toLocaleTimeString()}
                        </div>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
